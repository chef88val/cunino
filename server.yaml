swagger: "2.0"
info:
  description: "Cowapps-cunino"
  version: "1.0.0"
  title: "Cunino Store"
  termsOfService: ""
  contact:
    email: "jsm.multimedia@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "cuninoLLAlzira.swagger.io"
basePath: "/v1"
tags:
- name: "Family"
  description: "Familia de items"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Item"
  description: "Items"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /item:
    post:
      tags:
        - "item"
      summary: "Add a new item to the store"
      description: ""
      operationId: "addItem"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Item object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Item"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "Item created"
      security:
      - itemstore_auth:
        - "write:items"
        - "read:items"
    put:
      tags:
      - "item"
      summary: "Update an existing item"
      description: ""
      operationId: "updateItem"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Item object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Item"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Item not found"
        405:
          description: "Validation exception"
      security:
      - itemstore_auth:
        - "write:items"
        - "read:items"
    delete:
      tags:
       - 'item'
      summary: 'Delete item'
      description: ''
      operationId: 'deleteItem'
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: 'body'
          name: 'body'
          description: ''
          required: false
          schema:
            $ref: "#/definitions/Item"
      responses:
        400:
          description: 'Method not allowed'
        402:
          description: 'Value not right'
        405:
          description: 'Not found'
        200:
          description: 'Remove it'
      security:
        - itemstore_auth:
          - "write:items"
          - "read:items"
  /item/findByStatus:
    get:
      tags:
      - "item"
      summary: "Finds Items by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findItemsByStatus"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "status"
        in: "body"
        description: "Status values that need to be considered for filter"
        required: true
        type: "object"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Item"
        400:
          description: "Invalid status value"
        405: 
          description: 
      security:
      - itemstore_auth:
        - "write:items"
        - "read:items"
  /item/findByTags:
    get:
      tags:
      - "item"
      summary: "Finds Items by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findItemsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "body"
        description: "Tags to filter by"
        required: true
        type: "object"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Item"
        400:
          description: "Invalid tag value"
      security:
      - itemstore_auth:
        - "write:items"
        - "read:items"
      deprecated: true
  /item/{itemId}:
    get:
      tags:
      - "item"
      summary: "Find item by ID"
      description: "Returns a single item"
      operationId: "getItemById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Item"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Item not found"
      security:
      - api_key: []
    post:
      tags:
      - "item"
      summary: "Updates a item in the store with form data"
      description: ""
      operationId: "updateItemWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the item"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the item"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - itemstore_auth:
        - "write:items"
        - "read:items"
    delete:
      tags:
      - "item"
      summary: "Deletes a item"
      description: ""
      operationId: "deleteItem"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "itemId"
        in: "path"
        description: "Item id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Item not found"
      security:
      - itemstore_auth:
        - "write:items"
        - "read:items"
  /item/{itemId}/uploadImage:
    post:
      tags:
      - "item"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - itemstore_auth:
        - "write:items"
        - "read:items"
    /family:
    post:
      tags:
        - "family"
      summary: "Add a new family to the store"
      description: ""
      operationId: "addFamily"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Family object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Family"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "Family created"
      security:
      - familystore_auth:
        - "write:familys"
        - "read:familys"
    put:
      tags:
      - "family"
      summary: "Update an existing family"
      description: ""
      operationId: "updateFamily"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Family object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Family"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Family not found"
        405:
          description: "Validation exception"
      security:
      - familystore_auth:
        - "write:familys"
        - "read:familys"
    delete:
      tags:
       - 'family'
      summary: 'Delete family'
      description: ''
      operationId: 'deleteFamily'
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - in: 'body'
          name: 'body'
          description: ''
          required: false
          schema:
            $ref: "#/definitions/Family"
      responses:
        400:
          description: 'Method not allowed'
        402:
          description: 'Value not right'
        405:
          description: 'Not found'
        200:
          description: 'Remove it'
      security:
        - familystore_auth:
          - "write:familys"
          - "read:familys"
  /family/findByStatus:
    get:
      tags:
      - "family"
      summary: "Finds Familys by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findFamilysByStatus"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "status"
        in: "body"
        description: "Status values that need to be considered for filter"
        required: true
        type: "object"
        familys:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            familys:
              $ref: "#/definitions/Family"
        400:
          description: "Invalid status value"
        405: 
          description: 
      security:
      - familystore_auth:
        - "write:familys"
        - "read:familys"
  /family/findByTags:
    get:
      tags:
      - "family"
      summary: "Finds Familys by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findFamilysByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "body"
        description: "Tags to filter by"
        required: true
        type: "object"
        familys:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            familys:
              $ref: "#/definitions/Family"
        400:
          description: "Invalid tag value"
      security:
      - familystore_auth:
        - "write:familys"
        - "read:familys"
      deprecated: true
  /family/{familyId}:
    get:
      tags:
      - "family"
      summary: "Find family by ID"
      description: "Returns a single family"
      operationId: "getFamilyById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "familyId"
        in: "path"
        description: "ID of family to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Family"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Family not found"
      security:
      - api_key: []
    post:
      tags:
      - "family"
      summary: "Updates a family in the store with form data"
      description: ""
      operationId: "updateFamilyWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "familyId"
        in: "path"
        description: "ID of family that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the family"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the family"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - familystore_auth:
        - "write:familys"
        - "read:familys"
    delete:
      tags:
      - "family"
      summary: "Deletes a family"
      description: ""
      operationId: "deleteFamily"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "familyId"
        in: "path"
        description: "Family id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Family not found"
      security:
      - familystore_auth:
        - "write:familys"
        - "read:familys"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns item inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a item"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the item"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of item that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  itemstore_auth:
    type: "oauth2"
    authorizationUrl: "http://itemstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:items: "modify items in your account"
      read:items: "read your items"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      itemId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Item:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "item status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Item"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"